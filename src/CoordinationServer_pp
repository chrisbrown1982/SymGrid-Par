eval 'exec perl -S $0 ${1+"$@"}'
  if $running_under_some_shell;
# =!=!=!=!=!=!=!=!=!=!=!
# This script is automatically generated: DO NOT EDIT!!!
# Generated by Eden Compiler
#
$executable      = '/shared/opt/install64/pvm3/bin/LINUX64/chrisb=CoordinationServer_pp';
$executable_base = 'chrisb=CoordinationServer_pp';


# process the args first
$debug = '';
$nprocessors = 0; # the default: as many PEs as machines in PVM config
$dotrace = 0; # are we tracing?
@nonPVM_args = ();
$in_RTS_args = 0;

# name for trace file
$trcfile = $executable_base;
# name for machine file
$machinefile = "mpihosts";

args: while (@ARGV) {
    $a = shift(@ARGV);
    $trcfile = $trcfile . "_" . $a; 
    if ( $a eq '+RTS' ) {
        $in_RTS_args = 1;
    } elsif ( $a eq '-RTS' ) {
        $in_RTS_args = 0;
    }
    if ( $a eq '-d' && $in_RTS_args ) {
     # -d: start all PEs in debugger (PVM only)
        $debug = '-';
    } elsif ( $a =~ /^-N(\d+)/ && $in_RTS_args ) {
        $nprocessors = $1;
     # -N (or -qp for backward compatibility): no. of processors
    } elsif ( $a =~ /^-qp(\d+)/ && $in_RTS_args ) {
        $nprocessors = $1;
    } elsif ( $a =~ /^-MPI\@(\w+)/ && $in_RTS_args ) {
        $machinefile = $1;
    } elsif ( $a =~ /^-l/ && $in_RTS_args ) {
        $dotrace = 1;
        push(@nonPVM_args, $a);
    } else {
        push(@nonPVM_args, $a);
    }
}

if ( -e $machinefile ) { $machinefile = "-machinefile " . $machinefile
} else { $machinefile = "" }

local($return_val) = 0;
# Start the parallel execution by calling the real executable with suitable arguments
# This command is middleware-specific (different compiler ways, see DriverPipeline.hs)
system("$executable $debug$nprocessors @nonPVM_args");
$return_val = $?;

# trace post-processing
if ($dotrace) {
  print "Trace post-processing...\n";
# trace copying or archive creation 
system("if which zip &> /dev/null; then if test -f $trcfile.parevents; then rm $trcfile.parevents; fi; zip -m $trcfile.parevents $executable_base\#[0123456789]*.eventlog; else mkdir $trcfile\_parevents; mv $executable_base\#[0123456789]*.eventlog $trcfile\_parevents; fi");
if ( -f "$ENV{'HOME'}/$executable_base\#2.eventlog") {
# move trace files from home to here
system("if which zip &> /dev/null; then zip -gm $trcfile.parevents $ENV{'HOME'}/$executable_base\#.eventlog .; else  mv $ENV{'HOME'}/$executable_base\#[0123456789]*.eventlog $trcfile\_parevents; fi");
}
}

exit($return_val);
